<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Page de jeux - Casse-têtes</title>

<!-- Police rétro gaming -->
<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">

<style>
  /* Style de la page globale */
  body {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: Arial, sans-serif;
    background: url('https://www.toptal.com/designers/subtlepatterns/patterns/royal_bg.png');
    background-color: #e6eaf0;
    background-size: cover;
    margin: 0;
    padding: 20px;
    color: #333;
  }
  
  /* Style pour le titre urbain */
  .title {
    font-family: 'Nosifer', cursive;
    font-size: 48px;
    margin: 0;
    color: #333;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  }

  /* Sous-titre */
  .subtitle {
    font-size: 16px;
    margin-top: 5px;
    color: #555;
  }

  .puzzle-container {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 30px;
  }

  .puzzle-wrapper {
    position: relative;
    margin-bottom: 20px;
  }

  .puzzle {
    width: 320px;
    height: 320px;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(4, 1fr);
    gap: 2px;
  }

  .piece {
    width: 100%;
    height: 100%;
    cursor: pointer;
    border: 1px solid #000;
    transition: border-color 0.3s;
    background-size: 320px 320px;
  }

  /* Style rétro pour les messages de victoire */
  .winMessage {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 18px;
    font-family: 'Press Start 2P', cursive;
    color: #FF4500;
    background: rgba(255, 255, 255, 0.8);
    padding: 10px;
    border-radius: 10px;
    text-align: center;
  }
</style>
</head>

<body>

<!-- Titre urbain et sous-titre -->
<div class="title">Brxnsxn</div>
<div class="subtitle">Casse-tête d'albums</div>

<div class="puzzle-container">
  <!-- Casse-tête 1 -->
  <div class="puzzle-wrapper">
    <div class="puzzle" id="puzzle1"></div>
    <div class="winMessage" id="winMessage1">Félicitations, vous avez réussi !</div>
  </div>

  <!-- Casse-tête 2 -->
  <div class="puzzle-wrapper">
    <div class="puzzle" id="puzzle2"></div>
    <div class="winMessage" id="winMessage2">Félicitations, vous avez réussi !</div>
  </div>

  <!-- Casse-tête 3 -->
  <div class="puzzle-wrapper">
    <div class="puzzle" id="puzzle3"></div>
    <div class="winMessage" id="winMessage3">Félicitations, vous avez réussi !</div>
  </div>

  <!-- Casse-tête 4 -->
  <div class="puzzle-wrapper">
    <div class="puzzle" id="puzzle4"></div>
    <div class="winMessage" id="winMessage4">Félicitations, vous avez réussi !</div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const puzzles = [
      { id: 'puzzle1', img: 'https://i.imgur.com/IIBG8Bs.jpeg', winMsgId: 'winMessage1' },
      { id: 'puzzle2', img: 'https://i.imgur.com/b4biPgf.jpeg', winMsgId: 'winMessage2' },
      { id: 'puzzle3', img: 'https://i.imgur.com/xKEShQK.jpeg', winMsgId: 'winMessage3' },
      { id: 'puzzle4', img: 'https://i.imgur.com/XJPg4TH.jpeg', winMsgId: 'winMessage4' }
    ];

    puzzles.forEach(puzzle => initializePuzzle(puzzle));

    function initializePuzzle({ id, img, winMsgId }) {
      const puzzleContainer = document.getElementById(id);
      const winMessage = document.getElementById(winMsgId);
      const pieces = [];
      const gridSize = 4;
      const pieceSize = 320 / gridSize;

      // Crée les pièces avec leurs positions correctes
      for (let row = 0; row < gridSize; row++) {
        for (let col = 0; col < gridSize; col++) {
          const piece = document.createElement('div');
          piece.classList.add('piece');
          piece.style.backgroundImage = `url(${img})`;
          piece.style.backgroundPosition = `${-col * pieceSize}px ${-row * pieceSize}px`;
          piece.dataset.correctPosition = `${-col * pieceSize}px ${-row * pieceSize}px`;
          pieces.push(piece);
        }
      }

      // Mélange les pièces de manière désordonnée
      do {
        pieces.sort(() => Math.random() - 0.5);
      } while (pieces.every((piece, index) => {
        const correctRow = Math.floor(index / gridSize);
        const correctCol = index % gridSize;
        return piece.style.backgroundPosition === `${-correctCol * pieceSize}px ${-correctRow * pieceSize}px`;
      }));

      pieces.forEach(piece => puzzleContainer.appendChild(piece));

      let selectedPiece = null;

      // Fonction pour vérifier si le casse-tête est complété
      const checkWin = () => {
        return Array.from(puzzleContainer.children).every((piece, index) => {
          const correctRow = Math.floor(index / gridSize);
          const correctCol = index % gridSize;
          return piece.style.backgroundPosition === `${-correctCol * pieceSize}px ${-correctRow * pieceSize}px`;
        });
      };

      // Fonction pour échanger deux pièces dans le DOM
      const swapPieces = (piece1, piece2) => {
        const temp = document.createElement("div");
        puzzleContainer.replaceChild(temp, piece1);
        puzzleContainer.replaceChild(piece1, piece2);
        puzzleContainer.replaceChild(piece2, temp);

        // Vérifie si le casse-tête est complété après chaque échange
        if (checkWin()) {
          Array.from(puzzleContainer.children).forEach(piece => piece.classList.add('win'));
          winMessage.style.display = 'block';
        } else {
          Array.from(puzzleContainer.children).forEach(piece => piece.classList.remove('win'));
          winMessage.style.display = 'none';
        }
      };

      // Permet de cliquer pour échanger deux pièces
      Array.from(puzzleContainer.children).forEach(piece => {
        piece.addEventListener('click', () => {
          if (selectedPiece === piece) {
            selectedPiece.style.borderColor = '#000';
            selectedPiece = null;
          } else if (!selectedPiece) {
            selectedPiece = piece;
            piece.style.borderColor = 'red';
          } else {
            swapPieces(selectedPiece, piece);
            selectedPiece.style.borderColor = '#000';
            selectedPiece = null;
          }
        });
      });
    }
  });
</script>

</body>
</html>
